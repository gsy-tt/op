name: Build OpenWrt for JD BE6500

on:
  workflow_dispatch:  # 手动触发
  release:
    types: published  # 发布Release时触发

env:
  REPO_URL: https://github.com/openwrt/openwrt  # OpenWrt源码仓库
  REPO_BRANCH: master  # 主分支，可改为稳定版如v23.05.0
  FEEDS_CONF: feeds.conf.default  # 软件包源配置
  CONFIG_FILE: .config  # 编译配置文件
  DIY_P1_SH: diy-part1.sh  # 自定义脚本（更新feeds前执行）
  DIY_P2_SH: diy-part2.sh  # 自定义脚本（更新feeds后执行）
  UPLOAD_BIN_DIR: false  # 是否上传bin目录（包含所有编译文件）
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true  # 是否发布到Release
  TZ: Asia/Shanghai  # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04  # 运行环境

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: scripts

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip python3-distutils file wget
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

    - name: Clone OpenWrt source
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV
    - name: Forced international mirror feeds update
      run: |
        cd $OPENWRT_PATH
        
        # 强制使用官方源（不依赖ping检测）
        BEST_MIRROR="https://downloads.openwrt.org"
        echo "Using official mirror: $BEST_MIRROR"
        
        # 获取当前分支名
        BRANCH=$(git branch --show-current || echo "$REPO_BRANCH")
        ARCH=qca-ipq807x/generic
        CPU_ARCH=aarch64_cortex-a53
        
        # 根据分支生成源URL
        if [[ $BRANCH == "master" || $BRANCH == "dev" ]]; then
          BASE_URL="$BEST_MIRROR/snapshots"
        else
          CLEAN_BRANCH=${BRANCH#v}
          BASE_URL="$BEST_MIRROR/releases/$CLEAN_BRANCH"
        fi
        
        # 写入新的feeds.conf.default（仅使用官方源）
        cat > feeds.conf.default << EOF
        src-gz openwrt_core $BASE_URL/targets/$ARCH/packages
        src-gz openwrt_base $BASE_URL/packages/$CPU_ARCH/base
        src-gz openwrt_luci $BASE_URL/packages/$CPU_ARCH/luci
        src-gz openwrt_packages $BASE_URL/packages/$CPU_ARCH/packages
        src-gz openwrt_routing $BASE_URL/packages/$CPU_ARCH/routing
        src-gz openwrt_telephony $BASE_URL/packages/$CPU_ARCH/telephony
        EOF
        
        # 先不添加自定义源，确保核心源可用
        echo "Generated feeds.conf.default (official only):"
        cat feeds.conf.default
        
        # 创建详细的日志文件
        LOG_FILE="feeds_update.log"
        touch $LOG_FILE
        
        # 清理旧的feeds缓存
        rm -rf feeds/*
        
        # 步骤1：更新并安装官方核心feeds
        echo "Step 1: Updating and installing official core feeds..."
        for i in {1..5}; do
          echo "Attempt $i/5 to update core feeds..."
          ./scripts/feeds update -a 2>&1 | tee -a $LOG_FILE
          UPDATE_STATUS=${PIPESTATUS[0]}
          
          if [ $UPDATE_STATUS -eq 0 ]; then
            echo "Core feeds updated successfully"
            
            echo "Installing core packages..."
            ./scripts/feeds install -a 2>&1 | tee -a $LOG_FILE
            if [ $? -eq 0 ]; then
              echo "✅ Core packages installed successfully"
              break
            else
              echo "Failed to install core packages, retrying..."
            fi
          else
            echo "Core feeds update failed, retrying..."
          fi
          
          rm -rf feeds/*
          sleep 10
        done
        
        if [ $i -eq 5 ]; then
          echo "Core feeds update failed after 5 attempts!"
          echo "Full error log:"
          cat $LOG_FILE
          exit 1
        fi
        
        # 验证官方包数量（应该至少有2000+）
        OFFICIAL_PACKAGES=$(./scripts/feeds list | grep -vE '^#|^$' | wc -l)
        echo "Total official packages: $OFFICIAL_PACKAGES"
        
        if [ $OFFICIAL_PACKAGES -lt 2000 ]; then
          echo "Warning: Only $OFFICIAL_PACKAGES official packages found (expected >2000)"
          exit 1
        else
          echo "Official package installation verified successfully"
        fi
        
        # 步骤2：添加并更新自定义源（谨慎处理）
        echo "Step 2: Adding and updating custom feeds..."
        
        # 添加自定义源（使用GitHub官方地址）
        echo "src-git kenzo https://github.com/kenzok8/openwrt-packages.git" >> feeds.conf.default
        echo "src-git small https://github.com/kenzok8/small.git" >> feeds.conf.default
        
        echo "Updated feeds.conf.default (with custom sources):"
        cat feeds.conf.default
        
        # 尝试更新自定义feeds
        CUSTOM_FEEDS_SUCCESS=false
        
        for i in {1..3}; do
          echo "Attempt $i/3 to update custom feeds..."
          
          # 备份现有feeds，以防更新失败
          cp -r feeds feeds_backup
          
          # 仅更新自定义feeds
          ./scripts/feeds update kenzo small 2>&1 | tee -a $LOG_FILE
          UPDATE_STATUS=$?
          
          if [ $UPDATE_STATUS -eq 0 ]; then
            echo "Custom feeds updated successfully"
            
            # 安装自定义包
            echo "Installing custom packages..."
            ./scripts/feeds install -a -f kenzo small 2>&1 | tee -a $LOG_FILE
            if [ $? -eq 0 ]; then
              echo "✅ Custom packages installed successfully"
              CUSTOM_FEEDS_SUCCESS=true
              break
            else
              echo "Failed to install custom packages, restoring backup..."
              rm -rf feeds
              mv feeds_backup feeds
            fi
          else
            echo "Custom feeds update failed, restoring backup..."
            rm -rf feeds
            mv feeds_backup feeds
          fi
          
          sleep 10
        done
        
        # 如果自定义源更新失败，继续构建但记录警告
        if [ "$CUSTOM_FEEDS_SUCCESS" = "false" ]; then
          echo "⚠️ Warning: Custom feeds update failed. Proceeding with official packages only."
          # 从配置中移除失败的源
          sed -i '/kenzo/d' feeds.conf.default
          sed -i '/small/d' feeds.conf.default
        fi
        
        # 最终验证
        TOTAL_PACKAGES=$(./scripts/feeds list | grep -vE '^#|^$' | wc -l)
        echo "Total available packages: $TOTAL_PACKAGES"
        
        if [ $TOTAL_PACKAGES -lt 2000 ]; then
          echo "Warning: Only $TOTAL_PACKAGES packages found (expected >2000)"
          echo "Available packages:"
          ./scripts/feeds list | grep -vE '^#|^$' | sort > available_packages.txt
          cat available_packages.txt
          
          if [ "$CUSTOM_FEEDS_SUCCESS" = "false" ]; then
            echo "Proceeding with official packages only..."
          else
            exit 1
          fi
        else
          echo "Package installation verified successfully"
        fi
    - name: Customize feeds (Part 1)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P1_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
        else
          echo "No custom script $DIY_P1_SH found"
        fi

    - name: Load custom configuration
      run: |
        cd $OPENWRT_PATH
        if [ -f "$GITHUB_WORKSPACE/scripts/$CONFIG_FILE" ]; then
          cp $GITHUB_WORKSPACE/scripts/$CONFIG_FILE .config
        else
          echo "No custom config file found, using default"
          make defconfig
        fi

    - name: Customize configuration (Part 2)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P2_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
        else
          echo "No custom script $DIY_P2_SH found"
        fi

    - name: Download package dependencies
      run: |
        cd $OPENWRT_PATH
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread build"
        make -j$(nproc) V=s || make -j1 V=s  # 并行编译，失败则单线程重试

    - name: Check space usage
      run: |
        df -h
        du -sh $OPENWRT_PATH/bin

    - name: Collect firmware files
      id: collect
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        FIRMWARE_PATH=$(pwd)
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        if [ -n "$(ls $FIRMWARE_PATH/*.bin 2>/dev/null)" ]; then
          echo "FILES_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "FILES_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Upload firmware as artifact
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt-Firmware-${{ github.sha }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 30

    - name: Upload firmware to Release
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_RELEASE == 'true' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.FIRMWARE_PATH }}/*
        tag_name: ${{ github.ref_name }}
        body: |
          OpenWrt firmware for JD BE6500
          Built from commit ${{ github.sha }}
          Date: $(date +%Y-%m-%d)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



