{ name: 'Build OpenWrt for JD BE6500',
  on: { workflow_dispatch: null, release: { types: 'published' } },
  env: 
   { LIENOL_REPO: 'https://github.com/Lienol/openwrt',
     LIENOL_TARGET_REPO: 'https://github.com/Lienol/openwrt-target-ipq807x',
     LIENOL_BRANCH: 23.05,
     ARCH: 'ipq807x',
     SUBARCH: 'generic',
     CPU_ARCH: 'aarch64_cortex-a53',
     FEEDS_CONF: 'feeds.conf.default',
     CONFIG_FILE: '.config',
     DIY_P1_SH: 'diy-part1.sh',
     DIY_P2_SH: 'diy-part2.sh',
     UPLOAD_BIN_DIR: false,
     UPLOAD_FIRMWARE: true,
     UPLOAD_RELEASE: true,
     TZ: 'Asia/Shanghai',
     GITHUB_TOKEN: '${{ secrets.MY_TOKEN }}' },
  jobs: 
   { build: 
      { 'runs-on': 'ubuntu-22.04',
        steps: 
         [ { name: 'Checkout',
             uses: 'actions/checkout@v4',
             with: { path: 'scripts' } },
           { name: 'Set up Python',
             uses: 'actions/setup-python@v5',
             with: { 'python-version': '3.10' } },
           { name: 'Install dependencies',
             run: 'sudo apt-get update\nsudo apt-get -y install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip python3-distutils file wget\nsudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk\n' },
           { name: 'Configure Git Credentials',
             run: '# 配置Git凭据存储，解决URL注入问题\ngit config --global credential.helper store\necho "https://${GITHUB_TOKEN}:@github.com" > ~/.git-credentials\n# 验证配置\necho "Git credential helper: $(git config --global --get credential.helper)"\necho "Stored credentials: $(cat ~/.git-credentials || echo \'No credentials stored\')"\n' },
           { name: 'Clone Lienol\'s OpenWrt repo',
             run: '# 清理旧目录\nrm -rf openwrt\n\n# 检查分支是否存在\necho "Checking if branch $LIENOL_BRANCH exists..."\nif ! git ls-remote --heads $LIENOL_REPO $LIENOL_BRANCH | grep -q $LIENOL_BRANCH; then\n  echo "Branch $LIENOL_BRANCH does not exist in $LIENOL_REPO"\n  echo "Available branches:"\n  git ls-remote --heads $LIENOL_REPO | awk \'{print $2}\'\n  exit 1\nfi\n\n# 克隆仓库\nfor i in {1..3}; do\n  echo "Attempt $i/3 to clone Lienol\'s OpenWrt repo..."\n  git clone --depth=1 $LIENOL_REPO -b $LIENOL_BRANCH openwrt\n  if [ $? -eq 0 ]; then\n    echo "✅ 仓库克隆成功"\n    break\n  fi\n  echo "❌ 克隆失败，10秒后重试..."\n  sleep 10\ndone\n\n# 验证克隆结果\nif [ ! -d "openwrt" ]; then\n  echo "💥 三次克隆均失败，退出构建"\n  exit 1\nfi\n\ncd openwrt\necho "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV\n' },
           { name: 'Prepare IPQ5322 device tree',
             run: 'cd $OPENWRT_PATH\n\n# 从主仓库稀疏克隆IPQ807x目标支持\nif [ ! -d "target/linux/$ARCH" ]; then\n  echo "Cloning IPQ807x target support from main repo using sparse checkout..."\n  for i in {1..3}; do\n    git clone --depth=1 $LIENOL_REPO -b $LIENOL_BRANCH --single-branch --no-checkout temp_repo\n    if [ $? -ne 0 ]; then\n      echo "❌ 克隆主仓库失败，重试中..."\n      rm -rf temp_repo\n      sleep 10\n      continue\n    fi\n    \n    cd temp_repo\n    git sparse-checkout init --cone\n    git sparse-checkout set "target/linux/$ARCH"\n    git checkout\n    if [ $? -ne 0 ]; then\n      echo "❌ 稀疏检出失败，重试中..."\n      cd ..\n      rm -rf temp_repo\n      sleep 10\n      continue\n    fi\n    \n    mv target/linux/$ARCH ../target/linux/\n    cd ..\n    rm -rf temp_repo\n    \n    if [ -d "target/linux/$ARCH" ]; then\n      echo "✅ IPQ807x target support cloned successfully"\n      break\n    fi\n    \n    echo "❌ 克隆失败，10秒后重试..."\n    sleep 10\n  done\n  \n  if [ ! -d "target/linux/$ARCH" ]; then\n    echo "💥 无法获取IPQ807x目标支持，退出构建"\n    exit 1\n  fi\nfi        \n# 创建设备树（严格格式，无多余缩进）\nDEVICE_TREE="qcom,ipq5322-jd-be6500.dts"\nDTS_DIR="target/linux/$ARCH/dts"\nmkdir -p "$DTS_DIR"\nif [ ! -f "$DTS_DIR/$DEVICE_TREE" ]; then\n  echo "生成JD BE6500设备树..."\n  cat > "$DTS_DIR/$DEVICE_TREE" << \'EOF\'\n  /dts-v1/;\n  #include "qcom,ipq5322.dtsi"\n\n  / {\n  model = "JD BE6500";\n  compatible = "qcom,ipq5322", "qcom,ipq5000";\n\n  chosen {\n    bootargs = "earlycon=msm_serial_dm,0x1a10000 console=ttyMSM0,115200n8";\n  };\n\n  memory@80000000 {\n    device_type = "memory";\n    reg = <0x80000000 0x40000000>; /* 1GB */\n  };\n  };\n  EOF\nfi\n# 生成feeds.conf.default（严格格式，EOF必须顶格）\ncat > feeds.conf.default << EOF\nsrc-gz openwrt_core https://openwrt.lienz.net/snapshots/targets/ipq807x/generic/packages\nsrc-gz openwrt_base https://openwrt.lienz.net/snapshots/packages/aarch64_cortex-a53/base\nsrc-gz openwrt_luci https://openwrt.lienz.net/snapshots/packages/aarch64_cortex-a53/luci\nsrc-gz openwrt_packages https://openwrt.lienz.net/snapshots/packages/aarch64_cortex-a53/packages\nsrc-git lienol https://github.com/Lienol/openwrt-package\nEOF\n\n# 更新Feeds（带重试机制）\nrm -rf feeds/*\nfor i in {1..5}; do\n  echo "Attempt $i/5 to update feeds..."\n  ./scripts/feeds update -a 2>&1 | tee feeds.log\n  if [ $? -eq 0 ]; then\n    ./scripts/feeds install -a 2>&1 | tee -a feeds.log\n    if [ $? -eq 0 ]; then\n      PACKAGE_COUNT=$(./scripts/feeds list | grep -vE \'^#|^$\' | wc -l)\n      echo "找到 $PACKAGE_COUNT 个软件包"\n      # 写入目标配置\n      echo "CONFIG_TARGET_ipq807x=y" >> .config\n      echo "CONFIG_TARGET_ipq807x_generic=y" >> .config\n      echo "CONFIG_TARGET_IPQ807X_DEVICE_jd-be6500=y" >> .config\n      break\n    fi\n  fi\n  rm -rf feeds/*\n  sleep 15\ndone\n\n# 检查Feeds更新结果\nif [ ! -d "feeds" ]; then\n  echo "Feeds更新失败，退出构建"\n  cat feeds.log\n  exit 1\nfi\n\n\n# 其余部分保持不变...\n' },
           { name: 'Customize feeds (Part 1)',
             run: 'if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P1_SH" ]; then\n  cd $OPENWRT_PATH\n  chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P1_SH\n  $GITHUB_WORKSPACE/scripts/$DIY_P1_SH\nelse\n  echo "未找到自定义脚本 $DIY_P1_SH"\nfi\n' },
           { name: 'Load custom configuration',
             run: 'cd $OPENWRT_PATH\nif [ -f "$GITHUB_WORKSPACE/scripts/$CONFIG_FILE" ]; then\n  cp $GITHUB_WORKSPACE/scripts/$CONFIG_FILE .config\n  echo "已加载自定义配置"\nelse\n  echo "未找到自定义配置，使用默认配置"\n  make defconfig\nfi\n' },
           { name: 'Customize configuration (Part 2)',
             run: 'if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P2_SH" ]; then\n  cd $OPENWRT_PATH\n  chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P2_SH\n  $GITHUB_WORKSPACE/scripts/$DIY_P2_SH\nelse\n  echo "未找到自定义脚本 $DIY_P2_SH"\nfi\n' },
           { name: 'Download package dependencies',
             run: 'cd $OPENWRT_PATH\nmake download -j$(nproc)\n# 清理无效下载\nfind dl -size -1024c -exec ls -l {} \\;\nfind dl -size -1024c -exec rm -f {} \\;\n' },
           { name: 'Build firmware',
             run: 'cd $OPENWRT_PATH\necho "使用 $(nproc) 线程编译..."\nmake -j$(nproc) V=s || make -j1 V=s  # 并行编译，失败则单线程重试\n' },
           { name: 'Check space usage',
             run: 'df -h\ndu -sh $OPENWRT_PATH/bin\n' },
           { name: 'Collect firmware files',
             id: 'collect',
             run: 'cd $OPENWRT_PATH/bin/targets/*/*\nFIRMWARE_PATH=$(pwd)\necho "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV\necho "::set-output name=status::success"\nif [ -n "$(ls $FIRMWARE_PATH/*.bin 2>/dev/null)" ]; then\n  echo "FILES_AVAILABLE=true" >> $GITHUB_ENV\nelse\n  echo "FILES_AVAILABLE=false" >> $GITHUB_ENV\nfi\n' },
           { name: 'Upload firmware as artifact',
             if: 'steps.collect.outputs.status == \'success\' && env.FILES_AVAILABLE == \'true\' && env.UPLOAD_FIRMWARE == \'true\'',
             uses: 'actions/upload-artifact@v4',
             with: 
              { name: 'OpenWrt-Firmware-${{ github.sha }}',
                path: '${{ env.FIRMWARE_PATH }}',
                'retention-days': 30 } },
           { name: 'Upload firmware to Release',
             if: 'steps.collect.outputs.status == \'success\' && env.FILES_AVAILABLE == \'true\' && env.UPLOAD_RELEASE == \'true\' && github.event_name == \'release\'',
             uses: 'softprops/action-gh-release@v1',
             with: 
              { files: '${{ env.FIRMWARE_PATH }}/*',
                tag_name: '${{ github.ref_name }}',
                body: 'OpenWrt firmware for JD BE6500\nBuilt from commit ${{ github.sha }}\nDate: $(date +%Y-%m-%d)\n' },
             env: { GITHUB_TOKEN: '${{ secrets.MY_TOKEN }}' } } ] } } }
