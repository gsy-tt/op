name: Build OpenWrt for JD BE6500

on:
  workflow_dispatch:  # 手动触发
  release:
    types: published  # 发布Release时触发

env:
  REPO_URL: https://github.com/openwrt/openwrt  # OpenWrt源码仓库
  REPO_BRANCH: master  # 主分支，可改为稳定版如v23.05.0
  FEEDS_CONF: feeds.conf.default  # 软件包源配置
  CONFIG_FILE: .config  # 编译配置文件
  DIY_P1_SH: diy-part1.sh  # 自定义脚本（更新feeds前执行）
  DIY_P2_SH: diy-part2.sh  # 自定义脚本（更新feeds后执行）
  UPLOAD_BIN_DIR: false  # 是否上传bin目录（包含所有编译文件）
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true  # 是否发布到Release
  TZ: Asia/Shanghai  # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04  # 运行环境

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: scripts

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip python3-distutils file wget
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

    - name: Clone OpenWrt source
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV
    - name: Minimal official feeds update
      run: |
        cd $OPENWRT_PATH
        
        # 强制使用OpenWrt官方源（明确指定分支和架构）
        BRANCH=$(git branch --show-current || echo "master")
        ARCH=qca-ipq807x/generic  # JD BE6500架构
        CPU_ARCH=aarch64_cortex-a53  # IPQ5322处理器架构
        
        # 根据分支设置源URL（明确版本路径）
        if [[ $BRANCH == "master" || $BRANCH == "dev" ]]; then
          BASE_URL="https://downloads.openwrt.org/snapshots"
        else
          CLEAN_BRANCH=${BRANCH#v}
          BASE_URL="https://downloads.openwrt.org/releases/$CLEAN_BRANCH.0"
        fi
        
        # 写入极简feeds.conf.default（仅官方核心源）
        cat > feeds.conf.default << EOF
        src-gz openwrt_core $BASE_URL/targets/$ARCH/packages
        src-gz openwrt_base $BASE_URL/packages/$CPU_ARCH/base
        src-gz openwrt_luci $BASE_URL/packages/$CPU_ARCH/luci
        src-gz openwrt_packages $BASE_URL/packages/$CPU_ARCH/packages
        # 暂时注释路由和电话相关源（避免冲突）
        # src-gz openwrt_routing $BASE_URL/packages/$CPU_ARCH/routing
        # src-gz openwrt_telephony $BASE_URL/packages/$CPU_ARCH/telephony
        EOF
        
        # 打印配置（便于验证）
        echo "Generated minimal feeds.conf.default:"
        cat feeds.conf.default
        
        # 清理所有旧feeds（确保全新更新）
        rm -rf feeds/*
        
        # 步骤1：更新核心feeds（仅基础包）
        echo "Step 1: Updating core feeds..."
        for i in {1..5}; do
          ./scripts/feeds update base packages luci 2>&1
          if [ $? -eq 0 ]; then
            echo "Core feeds updated successfully"
            break
          else
            echo "Retry $i/5: Core feeds update failed, cleaning and retrying..."
            rm -rf feeds/*
            sleep 10
          fi
        done
        
        if [ $i -eq 5 ]; then
          echo "Core feeds update failed after 5 attempts!"
          exit 1
        fi
        
        # 步骤2：安装核心包并验证
        echo "Step 2: Installing core packages..."
        ./scripts/feeds install -a base packages luci
        if [ $? -ne 0 ]; then
          echo "Failed to install core packages!"
          exit 1
        fi
        
        # 验证核心包数量（至少2000+）
        CORE_PACKAGES=$(./scripts/feeds list | grep -vE '^#|^$' | wc -l)
        if [ $CORE_PACKAGES -lt 2000 ]; then
          echo "Error: Only $CORE_PACKAGES core packages found (expected >2000)"
          exit 1
        fi
        
        # 步骤3：添加路由和电话源（逐步测试）
        echo "Step 3: Adding routing and telephony feeds..."
        echo "src-gz openwrt_routing $BASE_URL/packages/$CPU_ARCH/routing" >> feeds.conf.default
        echo "src-gz openwrt_telephony $BASE_URL/packages/$CPU_ARCH/telephony" >> feeds.conf.default
        
        # 单独更新路由和电话源
        for i in {1..3}; do
          ./scripts/feeds update routing telephony 2>&1
          if [ $? -eq 0 ]; then
            echo "Routing/telephony feeds updated successfully"
            break
          else
            echo "Retry $i/3: Routing/telephony update failed, retrying..."
            sleep 10
          fi
        done
        
        if [ $i -eq 3 ]; then
          echo "Warning: Routing/telephony feeds update failed, continuing without them..."
        else
          ./scripts/feeds install -a routing telephony
        fi
        
        # 步骤4：添加自定义源（最后处理）
        echo "Step 4: Adding custom feeds..."
        echo "src-git kenzo https://github.com/kenzok8/openwrt-packages.git" >> feeds.conf.default
        echo "src-git small https://github.com/kenzok8/small.git" >> feeds.conf.default
        
        # 分步更新自定义源（每次只更新一个）
        for feed in kenzo small; do
          for i in {1..3}; do
            echo "Updating $feed feed..."
            ./scripts/feeds update $feed 2>&1
            if [ $? -eq 0 ]; then
              ./scripts/feeds install -a $feed
              break
            else
              echo "Retry $i/3: $feed update failed, retrying..."
              sleep 10
            fi
          done
        done
        
        # 最终验证
        TOTAL_PACKAGES=$(./scripts/feeds list | grep -vE '^#|^$' | wc -l)
        echo "Total available packages: $TOTAL_PACKAGES"
        if [ $TOTAL_PACKAGES -lt 2000 ]; then
          echo "Warning: Only $TOTAL_PACKAGES packages found, check feeds configuration!"
        else
          echo "Feeds update completed successfully"
        fi
    - name: Customize feeds (Part 1)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P1_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
        else
          echo "No custom script $DIY_P1_SH found"
        fi

    - name: Load custom configuration
      run: |
        cd $OPENWRT_PATH
        if [ -f "$GITHUB_WORKSPACE/scripts/$CONFIG_FILE" ]; then
          cp $GITHUB_WORKSPACE/scripts/$CONFIG_FILE .config
        else
          echo "No custom config file found, using default"
          make defconfig
        fi

    - name: Customize configuration (Part 2)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P2_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
        else
          echo "No custom script $DIY_P2_SH found"
        fi

    - name: Download package dependencies
      run: |
        cd $OPENWRT_PATH
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread build"
        make -j$(nproc) V=s || make -j1 V=s  # 并行编译，失败则单线程重试

    - name: Check space usage
      run: |
        df -h
        du -sh $OPENWRT_PATH/bin

    - name: Collect firmware files
      id: collect
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        FIRMWARE_PATH=$(pwd)
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        if [ -n "$(ls $FIRMWARE_PATH/*.bin 2>/dev/null)" ]; then
          echo "FILES_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "FILES_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Upload firmware as artifact
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt-Firmware-${{ github.sha }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 30

    - name: Upload firmware to Release
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_RELEASE == 'true' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.FIRMWARE_PATH }}/*
        tag_name: ${{ github.ref_name }}
        body: |
          OpenWrt firmware for JD BE6500
          Built from commit ${{ github.sha }}
          Date: $(date +%Y-%m-%d)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



