name: Build OpenWrt for JD BE6500

on:
  workflow_dispatch:  # 手动触发
  release:
    types: published  # 发布Release时触发

env:
  REPO_URL: https://github.com/openwrt/openwrt  # OpenWrt源码仓库
  REPO_BRANCH: master  # 主分支，可改为稳定版如v23.05.0
  FEEDS_CONF: feeds.conf.default  # 软件包源配置
  CONFIG_FILE: .config  # 编译配置文件
  DIY_P1_SH: diy-part1.sh  # 自定义脚本（更新feeds前执行）
  DIY_P2_SH: diy-part2.sh  # 自定义脚本（更新feeds后执行）
  UPLOAD_BIN_DIR: false  # 是否上传bin目录（包含所有编译文件）
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true  # 是否发布到Release
  TZ: Asia/Shanghai  # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04  # 运行环境

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: scripts

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip python3-distutils file wget
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

    - name: Clone OpenWrt source
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV
    - name: IPQ5322-specific feeds update (bash compatible)
      run: |
        cd $OPENWRT_PATH
        
        # 定义IPQ5322专用架构信息
        DEVICE_CHIP=ipq5322
        OFFICIAL_ARCHES=("ipq8074" "ipq807x" "ipq8071")  # 可能的官方架构
        COMMUNITY_ARCHES=("ipq5000" "ipq5322")          # 社区维护架构
        STABLE_BRANCHES=("23.05.5" "23.05.4" "23.05.3" "23.05.2" "23.05.1" "23.05.0")
        
        # 1. 检测可用的稳定分支
        VALID_BRANCH=""
        for branch in "${STABLE_BRANCHES[@]}"; do
          BASE_URL="https://downloads.openwrt.org/releases/$branch"
          if curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/targets" 2>/dev/null | grep -q "200"; then
            VALID_BRANCH=$branch
            echo "Found valid stable branch: $VALID_BRANCH"
            break
          fi
        done
        
        # 2. 若稳定分支不可用，使用snapshot
        if [ -z "$VALID_BRANCH" ]; then
          VALID_BRANCH="snapshots"
          BASE_URL="https://downloads.openwrt.org/snapshots"
          echo "Falling back to snapshot branch"
        fi
        
        # 3. 检测官方架构路径（优先）
        VALID_ARCH=""
        VALID_SUBARCH=""
        ARCH_FOUND=false
        
        for arch in "${OFFICIAL_ARCHES[@]}"; do
          if [ "$ARCH_FOUND" = true ]; then break; fi
          for subarch in "nand" "smp" "generic"; do
            TARGET_PATH="$BASE_URL/targets/$arch/$subarch/packages"
            if curl -s -o /dev/null -w "%{http_code}" "$TARGET_PATH" 2>/dev/null | grep -q "200"; then
              VALID_ARCH=$arch
              VALID_SUBARCH=$subarch
              ARCH_FOUND=true
              echo "Found official target path: $TARGET_PATH"
              break 2
            fi
          done
        done
        
        # 4. 检测社区架构路径（备用）
        if [ "$ARCH_FOUND" = false ]; then
          for arch in "${COMMUNITY_ARCHES[@]}"; do
            if [ "$ARCH_FOUND" = true ]; then break; fi
            for subarch in "nand" "smp" "generic"; do
              TARGET_PATH="https://mirrors.cloud.tencent.com/openwrt/$VALID_BRANCH/targets/$arch/$subarch/packages"
              if curl -s -o /dev/null -w "%{http_code}" "$TARGET_PATH" 2>/dev/null | grep -q "200"; then
                VALID_ARCH=$arch
                VALID_SUBARCH=$subarch
                ARCH_FOUND=true
                echo "Found community target path: $TARGET_PATH"
                break 2
              fi
            done
          done
        fi
        
        # 5. 若仍失败，输出可用架构列表
        if [ "$ARCH_FOUND" = false ]; then
          echo "Error: No valid path found for IPQ5322!"
          echo "Available targets in $BASE_URL:"
          curl -s "$BASE_URL/targets/" | grep -o '<a href="[^"]*">' | grep -o '[^"]*/' | sort -u
          exit 1
        fi
        
        # 6. 设置CPU架构
        CPU_ARCH="aarch64_cortex-a53"
        
        # 7. 生成feeds.conf.default
        cat > feeds.conf.default << EOF
        src-gz openwrt_core $BASE_URL/targets/$VALID_ARCH/$VALID_SUBARCH/packages
        src-gz openwrt_base $BASE_URL/packages/$CPU_ARCH/base
        src-gz openwrt_luci $BASE_URL/packages/$CPU_ARCH/luci
        src-gz openwrt_packages $BASE_URL/packages/$CPU_ARCH/packages
        EOF
        
        # 8. 添加社区软件包源（IPQ5322专用）
        echo "src-git lienol https://github.com/Lienol/openwrt-package" >> feeds.conf.default
        echo "src-git kenzo https://gitee.com/kenzok8/openwrt-packages" >> feeds.conf.default
        
        # 9. 清理并更新feeds
        rm -rf feeds/*
        for i in {1..5}; do
          echo "Attempt $i/5 to update feeds..."
          ./scripts/feeds update -a 2>&1 | tee feeds.log
          if [ $? -eq 0 ]; then
            ./scripts/feeds install -a 2>&1 | tee -a feeds.log
            if [ $? -eq 0 ]; then
              PACKAGE_COUNT=$(./scripts/feeds list | grep -vE '^#|^$' | wc -l)
              if [ $PACKAGE_COUNT -ge 3000 ]; then
                echo "✅ Success: $PACKAGE_COUNT packages found"
                exit 0
              else
                echo "Warning: Only $PACKAGE_COUNT packages found, but proceeding"
                exit 0
              fi
            fi
          fi
          rm -rf feeds/*
          sleep 15
        done
        
        echo "Feeds update failed after 5 attempts!"
        cat feeds.log
        exit 1
    - name: Customize feeds (Part 1)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P1_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
        else
          echo "No custom script $DIY_P1_SH found"
        fi

    - name: Load custom configuration
      run: |
        cd $OPENWRT_PATH
        if [ -f "$GITHUB_WORKSPACE/scripts/$CONFIG_FILE" ]; then
          cp $GITHUB_WORKSPACE/scripts/$CONFIG_FILE .config
        else
          echo "No custom config file found, using default"
          make defconfig
        fi

    - name: Customize configuration (Part 2)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P2_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
        else
          echo "No custom script $DIY_P2_SH found"
        fi

    - name: Download package dependencies
      run: |
        cd $OPENWRT_PATH
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread build"
        make -j$(nproc) V=s || make -j1 V=s  # 并行编译，失败则单线程重试

    - name: Check space usage
      run: |
        df -h
        du -sh $OPENWRT_PATH/bin

    - name: Collect firmware files
      id: collect
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        FIRMWARE_PATH=$(pwd)
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        if [ -n "$(ls $FIRMWARE_PATH/*.bin 2>/dev/null)" ]; then
          echo "FILES_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "FILES_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Upload firmware as artifact
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt-Firmware-${{ github.sha }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 30

    - name: Upload firmware to Release
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_RELEASE == 'true' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.FIRMWARE_PATH }}/*
        tag_name: ${{ github.ref_name }}
        body: |
          OpenWrt firmware for JD BE6500
          Built from commit ${{ github.sha }}
          Date: $(date +%Y-%m-%d)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



