name: Build OpenWrt for JD BE6500

on:
  workflow_dispatch:  # 手动触发
  release:
    types: published  # 发布Release时触发

env:
  LIENOL_REPO: https://github.com/Lienol/openwrt          # Lienol主仓库URL
  LIENOL_TARGET_REPO: https://github.com/Lienol/openwrt-target-ipq807x  # IPQ807x目标仓库
  LIENOL_BRANCH: 23.05                                  # Lienol默认分支
  ARCH: ipq807x                                          # 目标架构
  SUBARCH: generic                                       # 子架构
  CPU_ARCH: aarch64_cortex-a53                           # CPU架构
  FEEDS_CONF: feeds.conf.default                         # Feeds配置文件
  CONFIG_FILE: .config                                   # 编译配置文件
  DIY_P1_SH: diy-part1.sh                                # 自定义脚本1
  DIY_P2_SH: diy-part2.sh                                # 自定义脚本2
  UPLOAD_BIN_DIR: false                                  # 不上传bin目录
  UPLOAD_FIRMWARE: true                                  # 上传固件
  UPLOAD_RELEASE: true                                   # 发布到Release
  TZ: Asia/Shanghai                                      # 时区
  GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}                  # 自定义Token名称

jobs:
  build:
    runs-on: ubuntu-22.04                                 # 运行环境

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: scripts                                      # 自定义检出路径

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'                             # Python版本

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip python3-distutils file wget
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

    - name: Configure Git Credentials
      run: |
        # 配置Git凭据存储，解决URL注入问题
        git config --global credential.helper store
        echo "https://${GITHUB_TOKEN}:@github.com" > ~/.git-credentials
        # 验证配置
        echo "Git credential helper: $(git config --global --get credential.helper)"
        echo "Stored credentials: $(cat ~/.git-credentials || echo 'No credentials stored')"

    - name: Clone Lienol's OpenWrt repo
      run: |
        # 清理旧目录
        rm -rf openwrt
        
        # 检查分支是否存在
        echo "Checking if branch $LIENOL_BRANCH exists..."
        if ! git ls-remote --heads $LIENOL_REPO $LIENOL_BRANCH | grep -q $LIENOL_BRANCH; then
          echo "Branch $LIENOL_BRANCH does not exist in $LIENOL_REPO"
          echo "Available branches:"
          git ls-remote --heads $LIENOL_REPO | awk '{print $2}'
          exit 1
        fi
        
        # 克隆仓库
        for i in {1..3}; do
          echo "Attempt $i/3 to clone Lienol's OpenWrt repo..."
          git clone --depth=1 $LIENOL_REPO -b $LIENOL_BRANCH openwrt
          if [ $? -eq 0 ]; then
            echo "✅ 仓库克隆成功"
            break
          fi
          echo "❌ 克隆失败，10秒后重试..."
          sleep 10
        done
        
        # 验证克隆结果
        if [ ! -d "openwrt" ]; then
          echo "💥 三次克隆均失败，退出构建"
          exit 1
        fi
        
        cd openwrt
        echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV

    - name: Prepare IPQ5322 device tree
      run: |
        cd $OPENWRT_PATH
        
        # 从主仓库稀疏克隆IPQ807x目标支持
        if [ ! -d "target/linux/$ARCH" ]; then
          echo "Cloning IPQ807x target support from main repo using sparse checkout..."
          for i in {1..3}; do
            git clone --depth=1 $LIENOL_REPO -b $LIENOL_BRANCH --single-branch --no-checkout temp_repo
            if [ $? -ne 0 ]; then
              echo "❌ 克隆主仓库失败，重试中..."
              rm -rf temp_repo
              sleep 10
              continue
            fi
            
            cd temp_repo
            git sparse-checkout init --cone
            git sparse-checkout set "target/linux/$ARCH"
            git checkout
            if [ $? -ne 0 ]; then
              echo "❌ 稀疏检出失败，重试中..."
              cd ..
              rm -rf temp_repo
              sleep 10
              continue
            fi
            
            mv target/linux/$ARCH ../target/linux/
            cd ..
            rm -rf temp_repo
            
            if [ -d "target/linux/$ARCH" ]; then
              echo "✅ IPQ807x target support cloned successfully"
              break
            fi
            
            echo "❌ 克隆失败，10秒后重试..."
            sleep 10
          done
          
          if [ ! -d "target/linux/$ARCH" ]; then
            echo "💥 无法获取IPQ807x目标支持，退出构建"
            exit 1
          fi
        fi
        
        # 创建设备树（严格格式，无多余缩进）
        DEVICE_TREE="qcom,ipq5322-jd-be6500.dts"
        DTS_DIR="target/linux/$ARCH/dts"
        mkdir -p "$DTS_DIR"
        if [ ! -f "$DTS_DIR/$DEVICE_TREE" ]; then
          echo "生成JD BE6500设备树..."
          cat > "$DTS_DIR/$DEVICE_TREE" << 'EOF'
            /dts-v1/;
            #include "qcom,ipq5322.dtsi"

            / {
              model = "JD BE6500";
              compatible = "qcom,ipq5322", "qcom,ipq5000";

              chosen {
                bootargs = "earlycon=msm_serial_dm,0x1a10000 console=ttyMSM0,115200n8";
              };

              memory@80000000 {
                device_type = "memory";
                reg = <0x80000000 0x40000000>; /* 1GB */
              };
            };
          EOF
        fi
        
        # 其余部分保持不变...
    - name: Customize feeds (Part 1)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P1_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
        else
          echo "未找到自定义脚本 $DIY_P1_SH"
        fi

    - name: Load custom configuration
      run: |
        cd $OPENWRT_PATH
        if [ -f "$GITHUB_WORKSPACE/scripts/$CONFIG_FILE" ]; then
          cp $GITHUB_WORKSPACE/scripts/$CONFIG_FILE .config
          echo "已加载自定义配置"
        else
          echo "未找到自定义配置，使用默认配置"
          make defconfig
        fi

    - name: Customize configuration (Part 2)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P2_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
        else
          echo "未找到自定义脚本 $DIY_P2_SH"
        fi

    - name: Download package dependencies
      run: |
        cd $OPENWRT_PATH
        make download -j$(nproc)
        # 清理无效下载
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      run: |
        cd $OPENWRT_PATH
        echo "使用 $(nproc) 线程编译..."
        make -j$(nproc) V=s || make -j1 V=s  # 并行编译，失败则单线程重试

    - name: Check space usage
      run: |
        df -h
        du -sh $OPENWRT_PATH/bin

    - name: Collect firmware files
      id: collect
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        FIRMWARE_PATH=$(pwd)
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        if [ -n "$(ls $FIRMWARE_PATH/*.bin 2>/dev/null)" ]; then
          echo "FILES_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "FILES_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Upload firmware as artifact
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt-Firmware-${{ github.sha }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 30

    - name: Upload firmware to Release
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_RELEASE == 'true' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.FIRMWARE_PATH }}/*
        tag_name: ${{ github.ref_name }}
        body: |
          OpenWrt firmware for JD BE6500
          Built from commit ${{ github.sha }}
          Date: $(date +%Y-%m-%d)
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
