name: Build OpenWrt for JD BE6500

on:
  workflow_dispatch:  # 手动触发
  release:
    types: published  # 发布Release时触发

env:
  LIENOL_REPO: https://github.com/Lienol/openwrt  # Lienol仓库URL
  LIENOL_BRANCH: 24.10  # 根据实际分支修改，当前Lienol默认分支为24.10
  ARCH: ipq807x
  SUBARCH: generic
  CPU_ARCH: aarch64_cortex-a53
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 需在仓库Secrets中配置

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: scripts

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip python3-distutils file wget
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

    - name: Clone Lienol's OpenWrt repo (HTTPS with auth)
      run: |
        # 确保目录为空
        rm -rf openwrt
        for i in {1..3}; do
          echo "Attempt $i/3 to clone Lienol's OpenWrt repo..."
          # 使用GITHUB_TOKEN进行HTTPS认证
          git clone --depth=1 "https://${GITHUB_TOKEN}@github.com/Lienol/openwrt.git" -b $LIENOL_BRANCH openwrt
          if [ $? -eq 0 ]; then
            echo "Repo cloned successfully"
            break
          fi
          echo "Clone failed, retrying in 10s..."
          sleep 10
        done
        
        if [ ! -d "openwrt" ]; then
          echo "Failed to clone repository after 3 attempts"
          exit 1
        fi
        
        cd openwrt
        echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV

    - name: Prepare IPQ5322 device tree
      run: |
        cd $OPENWRT_PATH
        
        # 确保IPQ807x架构目录存在（使用HTTPS认证）
        if [ ! -d "target/linux/$ARCH" ]; then
          echo "Cloning IPQ807x target support..."
          git clone "https://${GITHUB_TOKEN}@github.com/Lienol/openwrt-target-ipq807x.git" target/linux/$ARCH
        fi
        
        # 确保设备树存在（京东BE6500）
        DEVICE_TREE="qcom,ipq5322-jd-be6500.dts"
        DTS_DIR="target/linux/$ARCH/dts"
        if [ ! -d "$DTS_DIR" ]; then
          mkdir -p "$DTS_DIR"
        fi
        if [ ! -f "$DTS_DIR/$DEVICE_TREE" ]; then
          echo "Adding JD BE6500 device tree..."
          cat > "$DTS_DIR/$DEVICE_TREE" << 'EOF'
            /dts-v1/;
            #include "qcom,ipq5322.dtsi"

            / {
              model = "JD BE6500";
              compatible = "qcom,ipq5322", "qcom,ipq5000";

              chosen {
                bootargs = "earlycon=msm_serial_dm,0x1a10000 console=ttyMSM0,115200n8";
              };

              memory@80000000 {
                device_type = "memory";
                reg = <0x80000000 0x40000000>; /* 1GB */
              };
            };
          EOF
        fi
        
        # 生成feeds.conf.default
        cat > feeds.conf.default << 'EOF'
          src-gz openwrt_core https://openwrt.lienz.net/snapshots/targets/ipq807x/generic/packages
          src-gz openwrt_base https://openwrt.lienz.net/snapshots/packages/aarch64_cortex-a53/base
          rc-gz openwrt_luci https://openwrt.lienz.net/snapshots/packages/aarch64_cortex-a53/luci
          src-gz openwrt_packages https://openwrt.lienz.net/snapshots/packages/aarch64_cortex-a53/packages
          src-git lienol https://github.com/Lienol/openwrt-package
        EOF
        
        # 清理并更新feeds
        rm -rf feeds/*
        for i in {1..5}; do
          echo "Attempt $i/5 to update feeds..."
          ./scripts/feeds update -a 2>&1 | tee feeds.log
          if [ $? -eq 0 ]; then
            ./scripts/feeds install -a 2>&1 | tee -a feeds.log
            if [ $? -eq 0 ]; then
              PACKAGE_COUNT=$(./scripts/feeds list | grep -vE '^#|^$' | wc -l)
              if [ $PACKAGE_COUNT -ge 4000 ]; then
                echo "✅ Success: $PACKAGE_COUNT packages found"
                
                # 配置默认目标为IPQ807x
                echo "CONFIG_TARGET_ipq807x=y" >> .config
                echo "CONFIG_TARGET_ipq807x_generic=y" >> .config
                echo "CONFIG_TARGET_IPQ807X_DEVICE_jd-be6500=y" >> .config
                
                exit 0
              else
                echo "Warning: Only $PACKAGE_COUNT packages found, but proceeding"
                exit 0
              fi
            fi
          fi
          rm -rf feeds/*
          sleep 15
        done
        
        echo "Feeds update failed after 5 attempts!"
        cat feeds.log
        exit 1

    - name: Customize feeds (Part 1)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P1_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
        else
          echo "No custom script $DIY_P1_SH found"
        fi

    - name: Load custom configuration
      run: |
        cd $OPENWRT_PATH
        if [ -f "$GITHUB_WORKSPACE/scripts/$CONFIG_FILE" ]; then
          cp $GITHUB_WORKSPACE/scripts/$CONFIG_FILE .config
        else
          echo "No custom config file found, using default"
          make defconfig
        fi

    - name: Customize configuration (Part 2)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P2_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
        else
          echo "No custom script $DIY_P2_SH found"
        fi

    - name: Download package dependencies
      run: |
        cd $OPENWRT_PATH
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread build"
        make -j$(nproc) V=s || make -j1 V=s

    - name: Check space usage
      run: |
        df -h
        du -sh $OPENWRT_PATH/bin

    - name: Collect firmware files
      id: collect
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        FIRMWARE_PATH=$(pwd)
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        if [ -n "$(ls $FIRMWARE_PATH/*.bin 2>/dev/null)" ]; then
          echo "FILES_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "FILES_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Upload firmware as artifact
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt-Firmware-${{ github.sha }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 30

    - name: Upload firmware to Release
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_RELEASE == 'true' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.FIRMWARE_PATH }}/*
        tag_name: ${{ github.ref_name }}
        body: |
          OpenWrt firmware for JD BE6500
          Built from commit ${{ github.sha }}
          Date: $(date +%Y-%m-%d)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
