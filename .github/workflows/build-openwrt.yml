name: Build OpenWrt for JD BE6500 (IPQ5332)

on:
  workflow_dispatch:  # ÊâãÂä®Ëß¶Âèë
    inputs:
      with_wsdd2:
        description: 'ÁºñËØëÂåÖÂê´ WSDD2 (SMB3 ÊîØÊåÅ)'
        required: false
        default: 'true'
        type: boolean
      with_samba4:
        description: 'ÁºñËØëÂåÖÂê´ Samba4'
        required: false
        default: 'true'
        type: boolean
      with_docker:
        description: 'ÁºñËØëÂåÖÂê´ Docker ÊîØÊåÅ'
        required: false
        default: 'true'
        type: boolean
  release:
    types: published  # ÂèëÂ∏ÉReleaseÊó∂Ëß¶Âèë

env:
  LIENOL_REPO: https://github.com/Lienol/openwrt          # Lienol‰∏ª‰ªìÂ∫ì
  LIENOL_BRANCH: 23.05                                  # ‰ΩøÁî®23.05ÂàÜÊîØ
  ARCH: ipq807x                                          # ‰ΩøÁî®ipq807xÁõÆÊ†áÔºàÂÖºÂÆπIPQ5332Ôºâ
  SUBARCH: generic                                       # ÈÄöÁî®Â≠êÊû∂ÊûÑ
  CPU_ARCH: aarch64_cortex-a53                           # CPUÊû∂ÊûÑ
  FEEDS_CONF: feeds.conf.default                         # FeedsÈÖçÁΩÆÊñá‰ª∂
  CONFIG_FILE: .config                                   # ÁºñËØëÈÖçÁΩÆÊñá‰ª∂
  DIY_P1_SH: diy-part1.sh                                # Ëá™ÂÆö‰πâËÑöÊú¨1
  DIY_P2_SH: diy-part2.sh                                # Ëá™ÂÆö‰πâËÑöÊú¨2
  UPLOAD_BIN_DIR: false                                  # ‰∏ç‰∏ä‰º†binÁõÆÂΩï
  UPLOAD_FIRMWARE: true                                  # ‰∏ä‰º†Âõ∫‰ª∂
  UPLOAD_RELEASE: true                                   # ÂèëÂ∏ÉÂà∞Release
  UPLOAD_CDN: false                                      # ‰∏ä‰º†Âà∞CDN
  TZ: Asia/Shanghai                                      # Êó∂Âå∫
  GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}                  # GitHub Token
  CACHE_DIR: ${{ github.workspace }}/.cache/openwrt       # ÁºìÂ≠òÁõÆÂΩï

jobs:
  build:
    runs-on: ubuntu-22.04                                 # Áõ¥Êé•‰ΩøÁî®UbuntuÁéØÂ¢É

    steps:
    - name: Ê£ÄÊü•ÁéØÂ¢É
      run: |
        df -hT
        free -h
        cat /proc/cpuinfo
        cat /etc/os-release

    - name: ÂÆâË£ÖOpenWrtÁºñËØë‰æùËµñ
      run: |
        sudo apt-get update
        # ÂÆâË£ÖOpenWrtÂÆòÊñπÊé®ËçêÁöÑÁºñËØë‰æùËµñ
        sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
          gettext git java-propose-classpath libelf-dev libncurses5-dev \
          libncursesw5-dev libssl-dev python3 python3-distutils python3-setuptools \
          python3-dev rsync subversion swig time unzip wget xmlto zlib1g-dev \
          quilt autopoint libtool-bin gperf flex bison gettext-base asciidoc dos2unix

    - name: ÈÖçÁΩÆGitÂá≠ËØÅ
      run: |
        git config --global credential.helper store
        echo "https://${GITHUB_TOKEN}:@github.com" > ~/.git-credentials
        echo "GitÂá≠ËØÅÂ∑≤ÈÖçÁΩÆ"

    - name: ÂÖãÈöÜLienol‰ªìÂ∫ìÔºàÂ∏¶ÈáçËØïÊú∫Âà∂Ôºâ
      run: |
        rm -rf openwrt
        for i in {1..5}; do
          echo "=== Á¨¨ $i Ê¨°ÂÖãÈöÜÂ∞ùËØï ==="
          git clone --depth=1 $LIENOL_REPO -b $LIENOL_BRANCH openwrt
          if [ $? -eq 0 ]; then
            echo "‚úÖ ‰ªìÂ∫ìÂÖãÈöÜÊàêÂäü"
            break
          fi
          echo "‚ùå ÂÖãÈöÜÂ§±Ë¥•Ôºå15ÁßíÂêéÈáçËØï..."
          sleep 15
        done
        if [ ! -d "openwrt" ]; then
          echo "üí• ‰∫îÊ¨°ÂÖãÈöÜÂ§±Ë¥•ÔºåÈÄÄÂá∫"
          exit 1
        fi
        cd openwrt
        echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV
        git log -1

    - name: ÁºìÂ≠ò‰æùËµñÂåÖÔºàÂä†ÈÄüÁºñËØëÔºâ
      uses: actions/cache@v3
      with:
        path: ${{ env.CACHE_DIR }}
        key: ${{ runner.os }}-openwrt-dl-${{ hashFiles('openwrt/dl/**', 'feeds.conf.default', '.config') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-dl-

    - name: ÂàõÂª∫ËÆæÂ§áÊ†ëÔºàIPQ5332ÈÄÇÈÖçÔºâ
      run: |
        cd $OPENWRT_PATH
        DEVICE_TREE="qcom,ipq5332-jd-be6500.dts"
        DTS_DIR="target/linux/$ARCH/dts"
        mkdir -p "$DTS_DIR"
        
        # ËÆæÂ§áÊ†ëÂÆåÊï¥ÊÄßÊ†°È™å
        if [ ! -f "$DTS_DIR/$DEVICE_TREE" ]; then
          echo "ÁîüÊàêJD BE6500ËÆæÂ§áÊ†ë..."
          touch "$DTS_DIR/$DEVICE_TREE"
          
          # ‰ΩøÁî®echoÁîüÊàêËÆæÂ§áÊ†ë
          echo "/dts-v1/;" > "$DTS_DIR/$DEVICE_TREE"
          echo "#include \"qcom,ipq5332.dtsi\"" >> "$DTS_DIR/$DEVICE_TREE"
          echo "#include \"ipq807x.dtsi\"" >> "$DTS_DIR/$DEVICE_TREE"
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "/ {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  model = \"JD BE6500\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  compatible = \"qcom,ipq5332\", \"qcom,ipq5000\", \"qcom,ipq807x\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  chosen {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    bootargs = \"earlycon=msm_serial_dm,0x1a10000 console=ttyMSM0,115200n8\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  };" >> "$DTS_DIR/$DEVICE_TREE"
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  memory@80000000 {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    device_type = \"memory\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    reg = <0x80000000 0x40000000>; /* 1GB */" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  };" >> "$DTS_DIR/$DEVICE_TREE"
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  # ÁΩëÁªúËÆæÂ§áÈÖçÁΩÆÔºàÊ†πÊçÆBE6500ÂÆûÈôÖÁ°¨‰ª∂Ë∞ÉÊï¥Ôºâ" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  ethernet@1a10000 {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    compatible = \"qcom,ipq8074-gmac\", \"qcom,ipq8064-gmac\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    reg = <0x1a10000 0x10000>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    interrupts = <0 42 4>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,phy-handle = <&switch0_phy0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,mdio-bus = <&mdio>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,port-id = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,rxq-pool = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,txq-pool = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,ptp-clock = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  };" >> "$DTS_DIR/$DEVICE_TREE"
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  mdio@1a14000 {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    compatible = \"qcom,ipq8074-mdio\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    reg = <0x1a14000 0x1000>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    #address-cells = <1>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    #size-cells = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  };" >> "$DTS_DIR/$DEVICE_TREE"
          echo "};" >> "$DTS_DIR/$DEVICE_TREE"
          
          echo "ËÆæÂ§áÊ†ëÂ∑≤ÁîüÊàê: $DTS_DIR/$DEVICE_TREE"
        else
          echo "ËÆæÂ§áÊ†ëÂ∑≤Â≠òÂú®ÔºåË∑≥ËøáÁîüÊàê"
        fi

    - name: Êô∫ËÉΩFeedsÈÖçÁΩÆÔºàÂéªÈáç+‰æùËµñ‰øÆÂ§çÔºâ
      run: |
        cd $OPENWRT_PATH
        # Â§á‰ªΩÂéüÂßãFeedsÈÖçÁΩÆ
        cp $FEEDS_CONF ${FEEDS_CONF}.bak
        
        # 1. Ê∏ÖÁêÜÈáçÂ§çÊ∫êÔºà‰øùÁïôÂîØ‰∏ÄÂÆû‰æãÔºâ
        UNIQUE_FEEDS=$(cat $FEEDS_CONF | grep -v '^#' | sort -u)
        > $FEEDS_CONF
        echo "$UNIQUE_FEEDS" >> $FEEDS_CONF
        
        # 2. Ê∑ªÂä†ÂøÖË¶ÅÊ∫êÔºàÈÅøÂÖçÈáçÂ§çÊ∑ªÂä†Ôºâ
        if ! grep -q "lienol" $FEEDS_CONF; then
          echo "src-git lienol https://github.com/Lienol/openwrt-package" >> $FEEDS_CONF
        fi
        if ! grep -q "kenzo" $FEEDS_CONF; then
          echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> $FEEDS_CONF
        fi
        if ! grep -q "small" $FEEDS_CONF; then
          echo "src-git small https://github.com/kenzok8/small" >> $FEEDS_CONF
        fi
        
        # 3. Ê∑ªÂä†ÂÆòÊñπÊ∫êÔºàË°•ÂÖÖÂü∫Á°ÄÂåÖÔºâ
        echo "src-gz openwrt_core https://downloads.openwrt.org/releases/23.05.0/targets/$ARCH/$SUBARCH/packages" >> $FEEDS_CONF
        echo "src-gz openwrt_base https://downloads.openwrt.org/releases/23.05.0/packages/$CPU_ARCH/base" >> $FEEDS_CONF
        echo "src-gz openwrt_luci https://downloads.openwrt.org/releases/23.05.0/packages/$CPU_ARCH/luci" >> $FEEDS_CONF
        echo "src-gz openwrt_packages https://downloads.openwrt.org/releases/23.05.0/packages/$CPU_ARCH/packages" >> $FEEDS_CONF
        
        # 4. ÊòæÁ§∫ÊúÄÁªàFeedsÈÖçÁΩÆ
        echo "=== ÊúÄÁªàFeedsÈÖçÁΩÆ ==="
        cat $FEEDS_CONF

    - name: ‰æùËµñÂº∫ÂåñÂÆâË£ÖÔºàËß£ÂÜ≥ÂéÜÂè≤Êä•ÈîôÔºâ
      run: |
        cd $OPENWRT_PATH
        # Ê∏ÖÁêÜÊóßFeeds
        rm -rf feeds/*
        
        # Â§öËΩÆFeedsÊõ¥Êñ∞ÔºàËß£ÂÜ≥ÁΩëÁªúÊ≥¢Âä®Ôºâ
        for i in {1..3}; do
          echo "=== Á¨¨ $i Ê¨°FeedsÊõ¥Êñ∞ ==="
          ./scripts/feeds update -a 2>&1 | tee feeds_update_${i}.log
          if [ $? -eq 0 ]; then
            break
          fi
          echo "Êõ¥Êñ∞Â§±Ë¥•Ôºå10ÁßíÂêéÈáçËØï..."
          sleep 10
        done
        
        # ÂÆâË£ÖFeedsÔºàÂ∏¶‰æùËµñ‰øÆÂ§çÔºâ
        ./scripts/feeds install -a 2>&1 | tee feeds_install.log
        
        # Ê£ÄÊµãÂπ∂ÂÆâË£ÖÁº∫Â§±ÁöÑÂÖ≥ÈîÆ‰æùËµñ
        MISSING_PACKAGES=()
        for pkg in luci-app-samba wsdd2 luci-app-samba4 libpam liblzma libnetsnmp docker dockerd docker-compose luci-app-dockerman; do
          if ! ./scripts/feeds list | grep -q $pkg; then
            MISSING_PACKAGES+=($pkg)
            echo "‚ö†Ô∏è Áº∫Â§±‰æùËµñ: $pkgÔºåÂ∞ùËØïÊâãÂä®Ê∑ªÂä†"
            
            # Ëá™Âä®ÂÖãÈöÜÁº∫Â§±ÁöÑÂåÖ
            if [ $pkg == "luci-app-samba" ]; then
              mkdir -p package/custom/luci
              git clone https://github.com/openwrt/luci.git package/custom/luci
            elif [ $pkg == "wsdd2" ]; then
              mkdir -p package/custom/wsdd2
              git clone https://github.com/small-5/wsdd2.git package/custom/wsdd2
            elif [ $pkg == "docker" ]; then
              mkdir -p package/custom/docker
              git clone https://github.com/lisaac/luci-app-dockerman.git package/custom/docker
            fi
          fi
        done
        
        if [ ${#MISSING_PACKAGES[@]} -gt 0 ]; then
          echo "ÂèëÁé∞ ${#MISSING_PACKAGES[@]} ‰∏™Áº∫Â§±‰æùËµñ: ${MISSING_PACKAGES[*]}"
          echo "ÈáçÊñ∞ÂÆâË£ÖFeeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
        else
          echo "‚úÖ ÊâÄÊúâ‰æùËµñÂ∑≤ÂÆâË£Ö"
        fi

    - name: Âü∫Á°ÄÈÖçÁΩÆÁîüÊàêÔºà‰øùÁïôÂπ∂Âº∫ÂåñÁõÆÊ†áÂπ≥Âè∞Ôºâ
      run: |
        cd $OPENWRT_PATH
        # ‰øùÁïôÂéüÊúâ.configÈÖçÁΩÆÔºå‰ΩÜÁ°Æ‰øùÁõÆÊ†áÂπ≥Âè∞Ê≠£Á°ÆËÆæÁΩÆ
        if [ -f "$CONFIG_FILE" ]; then
          echo "‚úÖ Ê£ÄÊµãÂà∞Â∑≤ÊúâÈÖçÁΩÆÊñá‰ª∂Ôºå‰øùÁïôÂπ∂Êõ¥Êñ∞ÁõÆÊ†áÂπ≥Âè∞ÈÖçÁΩÆ"
          # Â§á‰ªΩÂéüÈÖçÁΩÆ
          cp $CONFIG_FILE ${CONFIG_FILE}.bak
          
          # Á°Æ‰øùÁõÆÊ†áÂπ≥Âè∞Ê≠£Á°ÆËÆæÁΩÆ
          sed -i '/CONFIG_TARGET_IPQ807X/d' $CONFIG_FILE
          sed -i '/CONFIG_TARGET_IPQ807X_DEVICE_jd-be6500/d' $CONFIG_FILE
          echo "CONFIG_TARGET_IPQ807X=y" >> $CONFIG_FILE
          echo "CONFIG_TARGET_IPQ807X_DEVICE_jd-be6500=y" >> $CONFIG_FILE
          echo "CONFIG_TARGET_DEVICE_PACKAGES_jd-be6500=\"kmod-ath11k-ct kmod-qca-ppe\"" >> $CONFIG_FILE
          echo "CONFIG_TARGET_KERNEL_PARTSIZE=16" >> $CONFIG_FILE
          echo "CONFIG_TARGET_ROOTFS_PARTSIZE=128" >> $CONFIG_FILE
        else
          # ÁîüÊàêÈªòËÆ§ÈÖçÁΩÆ
          make defconfig
          
          # ËÆæÁΩÆÁõÆÊ†áÂπ≥Âè∞
          echo "CONFIG_TARGET_IPQ807X=y" >> $CONFIG_FILE
          echo "CONFIG_TARGET_IPQ807X_DEVICE_jd-be6500=y" >> $CONFIG_FILE
          echo "CONFIG_TARGET_DEVICE_PACKAGES_jd-be6500=\"kmod-ath11k-ct kmod-qca-ppe\"" >> $CONFIG_FILE
          echo "CONFIG_TARGET_KERNEL_PARTSIZE=16" >> $CONFIG_FILE
          echo "CONFIG_TARGET_ROOTFS_PARTSIZE=128" >> $CONFIG_FILE
        fi
        
        # ÊòæÁ§∫ÂΩìÂâçÈÖçÁΩÆÔºàÁî®‰∫éË∞ÉËØïÔºâ
        echo "=== ÂΩìÂâç.config ËÆæÂ§áÈÖçÁΩÆ ==="
        grep -E "CONFIG_TARGET_IPQ807X_DEVICE|CONFIG_TARGET_DEVICE_PACKAGES" .config

    - name: Âä®ÊÄÅ‰æùËµñÈÖçÁΩÆÔºàÊ†πÊçÆËæìÂÖ•ÂèÇÊï∞Ôºâ
      run: |
        cd $OPENWRT_PATH
        # Ê†πÊçÆÁî®Êà∑ËæìÂÖ•ÂêØÁî®ÂäüËÉΩÔºàËøΩÂä†ÊñπÂºèÔºâ
        if [ ${{ github.event.inputs.with_wsdd2 == 'true' }} ]; then
          echo "CONFIG_PACKAGE_wsdd2=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-wsdd2=y" >> .config
        fi
        
        if [ ${{ github.event.inputs.with_samba4 == 'true' }} ]; then
          echo "CONFIG_PACKAGE_samba4=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-samba4=y" >> .config
        fi
        
        # Ê†πÊçÆÁî®Êà∑ËæìÂÖ•Ê∑ªÂä†DockerÊîØÊåÅ
        if [ ${{ github.event.inputs.with_docker == 'true' }} ]; then
          echo "CONFIG_PACKAGE_docker=y" >> .config
          echo "CONFIG_PACKAGE_docker-compose=y" >> .config
          echo "CONFIG_PACKAGE_dockerd=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-dockerman=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y" >> .config
          echo "CONFIG_PACKAGE_libltdl=y" >> .config
          echo "CONFIG_PACKAGE_libseccomp=y" >> .config
          echo "CONFIG_PACKAGE_conntrackd=y" >> .config
          echo "CONFIG_PACKAGE_kmod-br-netfilter=y" >> .config
          echo "CONFIG_PACKAGE_kmod-ipt-nat6=y" >> .config
          echo "CONFIG_PACKAGE_kmod-ip6tables-nat=y" >> .config
          echo "CONFIG_PACKAGE_kmod-sctp=y" >> .config
          echo "CONFIG_PACKAGE_tzdata=y" >> .config
        fi
        
        # ‰øÆÂ§çÂéÜÂè≤‰æùËµñÈóÆÈ¢òÔºàËøΩÂä†ÊñπÂºèÔºâ
        echo "CONFIG_PACKAGE_libpam=y" >> .config
        echo "CONFIG_PACKAGE_liblzma=y" >> .config
        echo "CONFIG_PACKAGE_libnetsnmp=y" >> .config
        
        # ÊòæÁ§∫ÂÖ≥ÈîÆÈÖçÁΩÆ
        echo "=== ÂÖ≥ÈîÆÈÖçÁΩÆ ==="
        grep -E "CONFIG_TARGET|CONFIG_PACKAGE_(samba|wsdd2|docker|libpam)" .config

    - name: ËÆæÂ§áÊ†ëÂº∫Âà∂ÂÖ≥ËÅîÔºàÂ¢ûÂº∫ÁâàÔºâ
      run: |
        cd $OPENWRT_PATH
        echo "=== Âº∫Âà∂ÂÖ≥ËÅîËÆæÂ§áÊ†ëÂà∞ÁºñËØëÁ≥ªÁªü ==="
        
        # 1. Á°Æ‰øùËÆæÂ§áÊ†ëÂ≠òÂú®
        DEVICE_TREE="target/linux/$ARCH/dts/qcom,ipq5332-jd-be6500.dts"
        if [ ! -f "$DEVICE_TREE" ]; then
          echo "‚ùå ËÆæÂ§áÊ†ë‰∏çÂ≠òÂú®ÔºåÈáçÊñ∞ÁîüÊàê..."
          # ÈáçÊñ∞ÁîüÊàêËÆæÂ§áÊ†ëÔºà‰ΩøÁî®echoÔºâ
          mkdir -p "$(dirname "$DEVICE_TREE")"
          echo "/dts-v1/;" > "$DEVICE_TREE"
          echo "#include \"qcom,ipq5332.dtsi\"" >> "$DEVICE_TREE"
          echo "#include \"ipq807x.dtsi\"" >> "$DEVICE_TREE"
          echo "" >> "$DEVICE_TREE"
          echo "/ {" >> "$DEVICE_TREE"
          echo "  model = \"JD BE6500\";" >> "$DEVICE_TREE"
          echo "  compatible = \"qcom,ipq5332\", \"qcom,ipq5000\", \"qcom,ipq807x\";" >> "$DEVICE_TREE"
          echo "" >> "$DEVICE_TREE"
          echo "  chosen {" >> "$DEVICE_TREE"
          echo "    bootargs = \"earlycon=msm_serial_dm,0x1a10000 console=ttyMSM0,115200n8\";" >> "$DEVICE_TREE"
          echo "  };" >> "$DEVICE_TREE"
          echo "" >> "$DEVICE_TREE"
          echo "  memory@80000000 {" >> "$DEVICE_TREE"
          echo "    device_type = \"memory\";" >> "$DEVICE_TREE"
          echo "    reg = <0x80000000 0x40000000>; /* 1GB */" >> "$DEVICE_TREE"
          echo "  };" >> "$DEVICE_TREE"
          echo "" >> "$DEVICE_TREE"
          echo "  # ÁΩëÁªúËÆæÂ§áÈÖçÁΩÆÔºàÊ†πÊçÆBE6500ÂÆûÈôÖÁ°¨‰ª∂Ë∞ÉÊï¥Ôºâ" >> "$DEVICE_TREE"
          echo "  ethernet@1a10000 {" >> "$DEVICE_TREE"
          echo "    compatible = \"qcom,ipq8074-gmac\", \"qcom,ipq8064-gmac\";" >> "$DEVICE_TREE"
          echo "    reg = <0x1a10000 0x10000>;" >> "$DEVICE_TREE"
          echo "    interrupts = <0 42 4>;" >> "$DEVICE_TREE"
          echo "    qcom,phy-handle = <&switch0_phy0>;" >> "$DEVICE_TREE"
          echo "    qcom,mdio-bus = <&mdio>;" >> "$DEVICE_TREE"
          echo "    qcom,port-id = <0>;" >> "$DEVICE_TREE"
          echo "    qcom,rxq-pool = <0>;" >> "$DEVICE_TREE"
          echo "    qcom,txq-pool = <0>;" >> "$DEVICE_TREE"
          echo "    qcom,ptp-clock = <0>;" >> "$DEVICE_TREE"
          echo "  };" >> "$DEVICE_TREE"
          echo "" >> "$DEVICE_TREE"
          echo "  mdio@1a14000 {" >> "$DEVICE_TREE"
          echo "    compatible = \"qcom,ipq8074-mdio\";" >> "$DEVICE_TREE"
          echo "    reg = <0x1a14000 0x1000>;" >> "$DEVICE_TREE"
          echo "    #address-cells = <1>;" >> "$DEVICE_TREE"
          echo "    #size-cells = <0>;" >> "$DEVICE_TREE"
          echo "  };" >> "$DEVICE_TREE"
          echo "};" >> "$DEVICE_TREE"
        fi
        
        # 2. Á°Æ‰øùËÆæÂ§áÊ†ëË¢´ÁºñËØëÁ≥ªÁªüËØÜÂà´
        MAKEFILE="target/linux/$ARCH/image/Makefile"
        if ! grep -q "jd-be6500" "$MAKEFILE"; then
          echo "‚ùå ËÆæÂ§áÊ†ëÊú™Ë¢´MakefileËØÜÂà´ÔºåÊâãÂä®Ê∑ªÂä†..."
          
          # ÂÆö‰πâËÆæÂ§áÊ†ë‰ø°ÊÅØÔºà‰ΩøÁî®echoÔºâ
          echo "" >> "$MAKEFILE"
          echo "define Device/jd-be6500" >> "$MAKEFILE"
          echo "  \$(Device/generic)" >> "$MAKEFILE"
          echo "  DEVICE_TITLE := JD BE6500 (IPQ5332)" >> "$MAKEFILE"
          echo "  DEVICE_DTS := qcom,ipq5332-jd-be6500" >> "$MAKEFILE"
          echo "  DEVICE_PACKAGES := kmod-ath11k-ct kmod-qca-ppe kmod-qca-nss-drv kmod-qca-nss-gmac" >> "$MAKEFILE"
          echo "endef" >> "$MAKEFILE"
          echo "\$(eval \$(call Device,jd-be6500))" >> "$MAKEFILE"
          
          if grep -q "jd-be6500" "$MAKEFILE"; then
            echo "‚úÖ ËÆæÂ§áÊ†ëÂ∑≤Ê∑ªÂä†Âà∞Makefile"
          else
            echo "‚ùå ËÆæÂ§áÊ†ëÊ∑ªÂä†Â§±Ë¥•"
            exit 1
          fi
        else
          echo "‚úÖ ËÆæÂ§áÊ†ëÂ∑≤Ë¢´MakefileËØÜÂà´"
        fi

    - name: Â∫îÁî®diy-part1.shËÑöÊú¨ÔºàËá™ÂÆö‰πâÈÖçÁΩÆÔºâ
      run: |
        cd $OPENWRT_PATH
        if [ -f "$DIY_P1_SH" ]; then
          echo "ÊâßË°åËá™ÂÆö‰πâËÑöÊú¨: $DIY_P1_SH"
          chmod +x $DIY_P1_SH
          ./$DIY_P1_SH
        else
          echo "‚ùå Ëá™ÂÆö‰πâËÑöÊú¨‰∏çÂ≠òÂú®: $DIY_P1_SH"
        fi

    - name: ‰∏ãËΩΩ‰æùËµñÂåÖÔºàÂ∏¶ÁºìÂ≠òÔºâ
      run: |
        cd $OPENWRT_PATH
        echo "ÂºÄÂßã‰∏ãËΩΩ‰æùËµñÂåÖ..."
        
        # ‰ºòÂÖà‰ΩøÁî®ÁºìÂ≠ò
        if [ -d "${{ env.CACHE_DIR }}/dl" ]; then
          echo "‰ΩøÁî®ÁºìÂ≠ò‰æùËµñÂåÖ..."
          cp -rf "${{ env.CACHE_DIR }}/dl" .
        fi
        
        # ÊâßË°å‰∏ãËΩΩ
        make download -j$(nproc) V=s
        DOWNLOAD_STATUS=$?
        
        # ‰øùÂ≠òÁºìÂ≠ò
        mkdir -p "${{ env.CACHE_DIR }}/dl"
        cp -rf dl/* "${{ env.CACHE_DIR }}/dl/"
        
        # Ê∏ÖÁêÜÊó†ÊïàÊñá‰ª∂
        find dl -size -1024c -exec rm -f {} \;
        
        if [ $DOWNLOAD_STATUS -ne 0 ]; then
          echo "‚ö†Ô∏è ‰∏ãËΩΩÂèØËÉΩÂ≠òÂú®ÈîôËØØÔºåÁªßÁª≠ÊûÑÂª∫..."
          find dl -type f -empty -exec echo "Á©∫Êñá‰ª∂: {}" \;
        else
          echo "‚úÖ ‰æùËµñ‰∏ãËΩΩÂÆåÊàê"
          echo "‰∏ãËΩΩÊñá‰ª∂Êï∞: $(find dl -type f | wc -l)"
        fi

    - name: ÁºñËØëÂõ∫‰ª∂ÔºàÂ∏¶ËØ¶ÁªÜÈîôËØØÊó•ÂøóÔºâ
      run: |
        cd $OPENWRT_PATH
        echo "ÂºÄÂßãÁºñËØëÂõ∫‰ª∂... (IPQ5332‰∏ìÁî®)"
        echo "‰ΩøÁî® $(nproc) Á∫øÁ®ãÁºñËØë..."
        
        # Á¨¨‰∏ÄÈò∂ÊÆµÔºöÂπ∂Ë°åÁºñËØë
        make -j$(nproc) V=s 2>&1 | tee compile_phase1.log
        PHASE1_STATUS=$?
        
        if [ $PHASE1_STATUS -ne 0 ]; then
          echo "‚ùå Âπ∂Ë°åÁºñËØëÂ§±Ë¥•ÔºåÂ∞ùËØïÂçïÁ∫øÁ®ãÁºñËØë..."
          # Á¨¨‰∫åÈò∂ÊÆµÔºöÂçïÁ∫øÁ®ãÁºñËØëÔºàËé∑ÂèñËØ¶ÁªÜÈîôËØØÔºâ
          make -j1 V=s 2>&1 | tee compile_phase2.log
          PHASE2_STATUS=$?
          
          if [ $PHASE2_STATUS -ne 0 ]; then
            echo "üí• ÁºñËØëÂΩªÂ∫ïÂ§±Ë¥•ÔºåÊî∂ÈõÜÈîôËØØÊó•Âøó..."
            # ÊèêÂèñÂÖ≥ÈîÆÈîôËØØ‰ø°ÊÅØ
            echo "=== ÁºñËØëÈîôËØØÊëòË¶Å ==="
            grep -E "error:|fatal:|make\[.*:.*Error\]" compile_phase2.log || true
            
            # ‰øùÂ≠òÂÆåÊï¥Êó•Âøó
            mkdir -p error_logs
            cp compile_phase*.log error_logs/
            cp $(find . -name "*.err" -or -name "*.log") error_logs/ 2>/dev/null
            tar -czf error_logs.tar.gz error_logs
            exit 1
          else
            echo "‚úÖ ÂçïÁ∫øÁ®ãÁºñËØëÊàêÂäü"
          fi
        else
          echo "‚úÖ Âπ∂Ë°åÁºñËØëÊàêÂäü"
        fi

    - name: Âõ∫‰ª∂ÂÆåÊï¥ÊÄßÊ£ÄÊü•ÔºàÂ§öÁ∫ßË∑ØÂæÑÊ£ÄÊµãÔºâ
      run: |
        cd $OPENWRT_PATH
        # ‰ºòÂÖàÊ£ÄÊµãipq807xÁõÆÊ†áÔºà‰∏âÁ∫ßË∑ØÂæÑÊ£ÄÊµãÔºâ
        IPQ807X_DIR=$(find . -type d -name "ipq807x" 2>/dev/null | head -n1)
        if [ -z "$IPQ807X_DIR" ]; then
          IPQ807X_DIR=$(find . -type d -name "qcom" 2>/dev/null | head -n1)
          if [ -z "$IPQ807X_DIR" ]; then
            echo "‚ùå Êú™ÊâæÂà∞ipq807x/qcomÁõÆÊ†áÁõÆÂΩï"
            echo "ÂèØÁî®ÁõÆÊ†áÁõÆÂΩï:"
            find . -type d -name "*" | grep targets
            exit 1
          fi
        fi
        
        FIRMWARE_PATH="$IPQ807X_DIR/generic"
        if [ ! -d "$FIRMWARE_PATH" ]; then
          FIRMWARE_PATH="$IPQ807X_DIR/*/generic"
          FIRMWARE_PATH=$(echo $FIRMWARE_PATH | sed 's|/*/generic|/generic|')
          if [ ! -d "$FIRMWARE_PATH" ]; then
            echo "‚ùå Êú™ÊâæÂà∞ÈÄöÁî®Âõ∫‰ª∂ÁõÆÂΩï"
            echo "ÂèØÁî®ÁõÆÂΩï:"
            find "$IPQ807X_DIR" -type d
            exit 1
          fi
        fi
        
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        
        # Ê£ÄÊü•ÂÖ≥ÈîÆÂõ∫‰ª∂Êñá‰ª∂
        REQUIRED_FILES=(
          "openwrt-$ARCH-$SUBARCH-generic-jd-be6500-squashfs-sysupgrade.bin"
          "openwrt-$ARCH-$SUBARCH-generic-rootfs.tar.gz"
          "openwrt-$ARCH-$SUBARCH-generic-ext4-fsck"
        )
        
        MISSING_FILES=()
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$FIRMWARE_PATH/$file" ]; then
            MISSING_FILES+=($file)
          fi
        done
        
        if [ ${#MISSING_FILES[@]} -gt 0 ]; then
          echo "‚ùå ÂèëÁé∞Áº∫Â§±Âõ∫‰ª∂Êñá‰ª∂: ${MISSING_FILES[*]}"
          echo "ÂèØÁî®Êñá‰ª∂:"
          ls -lh $FIRMWARE_PATH/* || true
          exit 1
        else
          echo "‚úÖ ÊâÄÊúâÂÖ≥ÈîÆÂõ∫‰ª∂Êñá‰ª∂Â∑≤ÁîüÊàê"
          ls -lh $FIRMWARE_PATH/*.bin
        fi

    - name: ÁîüÊàêÁâàÊú¨‰ø°ÊÅØ
      id: version
      run: |
        cd $OPENWRT_PATH
        RELEASE_DATE=$(date +%Y%m%d)
        COMMIT_ID=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date +"%Y-%m-%d %H:%M:%S")
        BUILD_HOST=$(hostname)
        
        # ÁîüÊàêÁâàÊú¨‰ø°ÊÅØÊñá‰ª∂
        touch version.info
        echo "OpenWrt Âõ∫‰ª∂ for JD BE6500 (IPQ5332)" > version.info
        echo "ÁºñËØëÊó∂Èó¥: $BUILD_TIME" >> version.info
        echo "ÁºñËØë‰∏ªÊú∫: $BUILD_HOST" >> version.info
        echo "Git Êèê‰∫§: $COMMIT_ID" >> version.info
        echo "Lienol ÂàÜÊîØ: $LIENOL_BRANCH" >> version.info
        echo "ÁõÆÊ†áÂπ≥Âè∞: $ARCH/$SUBARCH" >> version.info
        
        # ËæìÂá∫ÁâàÊú¨ÂèòÈáè
        echo "release_version=OpenWrt_${RELEASE_DATE}_${COMMIT_ID}" >> $GITHUB_ENV
        echo "release_version=OpenWrt_${RELEASE_DATE}_${COMMIT_ID}" >> $GITHUB_OUTPUT
        cat version.info

    - name: ‰∏ä‰º†Âõ∫‰ª∂Âà∞Artifact
      if: env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.release_version }}
        path: |
          ${{ env.FIRMWARE_PATH }}/*.bin
          ${{ env.FIRMWARE_PATH }}/*.tar.gz
          ${{ env.FIRMWARE_PATH }}/sha256sums
          version.info
        retention-days: 30
        if-no-files-found: error

    - name: ÂèëÂ∏ÉÂà∞GitHub Release
      if: env.UPLOAD_RELEASE == 'true' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.release_version }}
        tag_name: ${{ env.release_version }}
        body_path: version.info
        files: |
          ${{ env.FIRMWARE_PATH }}/*.bin
          ${{ env.FIRMWARE_PATH }}/*.tar.gz
          ${{ env.FIRMWARE_PATH }}/sha256sums
          version.info
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
