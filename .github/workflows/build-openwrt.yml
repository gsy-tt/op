name: Build OpenWrt for JD BE6500

on:
  workflow_dispatch:  # 手动触发
  release:
    types: published  # 发布Release时触发

env:
  REPO_URL: https://github.com/openwrt/openwrt  # OpenWrt源码仓库
  REPO_BRANCH: master  # 主分支，可改为稳定版如v23.05.0
  FEEDS_CONF: feeds.conf.default  # 软件包源配置
  CONFIG_FILE: .config  # 编译配置文件
  DIY_P1_SH: diy-part1.sh  # 自定义脚本（更新feeds前执行）
  DIY_P2_SH: diy-part2.sh  # 自定义脚本（更新feeds后执行）
  UPLOAD_BIN_DIR: false  # 是否上传bin目录（包含所有编译文件）
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true  # 是否发布到Release
  TZ: Asia/Shanghai  # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04  # 运行环境

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: scripts

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip python3-distutils file wget
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

    - name: Clone OpenWrt source
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV
    - name: Multi-mirror feeds update with retry
      run: |
        cd $OPENWRT_PATH
        
        # 定义镜像源列表
        MIRRORS=(
          "https://mirrors.tuna.tsinghua.edu.cn/openwrt"
          "https://mirrors.ustc.edu.cn/openwrt"
          "https://openwrt.cc"
          "https://downloads.openwrt.org"  # 保留官方源作为备选
        )
        
        # 网络诊断（尝试所有镜像源）
        echo "Network diagnosis:"
        for mirror in "${MIRRORS[@]}"; do
          domain=$(echo $mirror | awk -F/ '{print $3}')
          echo "Checking $domain..."
          ping -c 3 $domain >/dev/null 2>&1
          PING_STATUS=$?
          
          if [ $PING_STATUS -eq 0 ]; then
            echo "✅ $domain is reachable via ICMP"
            REACHABLE_MIRRORS+=("$mirror")
          else
            echo "❌ $domain is unreachable via ICMP, but continuing..."
            # 即使ping不通，也将其添加到备选列表，因为HTTP可能仍可用
            REACHABLE_MIRRORS+=("$mirror")
          fi
        done
        
        # 如果没有可达的镜像，使用第一个镜像继续尝试
        if [ ${#REACHABLE_MIRRORS[@]} -eq 0 ]; then
          echo "No mirrors are reachable via ICMP, using the first mirror as fallback"
          REACHABLE_MIRRORS=("${MIRRORS[0]}")
        fi
        
        # 获取当前分支名
        BRANCH=$(git branch --show-current || echo "$REPO_BRANCH")
        ARCH=qca-ipq807x/generic
        CPU_ARCH=aarch64_cortex-a53
        
        # 尝试所有可用镜像，直到找到一个可以工作的
        for mirror in "${REACHABLE_MIRRORS[@]}"; do
          echo "Trying mirror: $mirror"
          
          # 根据分支生成源URL
          if [[ $BRANCH == "master" || $BRANCH == "dev" ]]; then
            BASE_URL="$mirror/snapshots"
          else
            CLEAN_BRANCH=${BRANCH#v}
            BASE_URL="$mirror/releases/$CLEAN_BRANCH"
          fi
          
          # 写入新的feeds.conf.default
          cat > feeds.conf.default << EOF
          src-gz openwrt_core $BASE_URL/targets/$ARCH/packages
          src-gz openwrt_base $BASE_URL/packages/$CPU_ARCH/base
          src-gz openwrt_luci $BASE_URL/packages/$CPU_ARCH/luci
          src-gz openwrt_packages $BASE_URL/packages/$CPU_ARCH/packages
          src-gz openwrt_routing $BASE_URL/packages/$CPU_ARCH/routing
          src-gz openwrt_telephony $BASE_URL/packages/$CPU_ARCH/telephony
          EOF
          
          # 添加国内镜像源
          echo "src-git kenzo https://gitee.com/kenzok8/openwrt-packages.git" >> feeds.conf.default
          echo "src-git small https://gitee.com/kenzok8/small.git" >> feeds.conf.default
          
          # 打印生成的配置
          echo "Generated feeds.conf.default:"
          cat feeds.conf.default
          
          # 创建详细的日志文件
          LOG_FILE="feeds_update_${mirror//\//_}.log"
          touch $LOG_FILE
          
          # 清理旧的feeds缓存
          rm -rf feeds/*
          
          # 尝试更新feeds
          echo "Attempting to update feeds using $mirror..."
          for i in {1..3}; do
            echo "Attempt $i/3 to update feeds..."
            ./scripts/feeds update -a 2>&1 | tee -a $LOG_FILE
            UPDATE_STATUS=${PIPESTATUS[0]}
            
            if [ $UPDATE_STATUS -eq 0 ]; then
              echo "Feeds updated successfully using $mirror"
              
              # 尝试安装feeds
              echo "Installing packages..."
              ./scripts/feeds install -a 2>&1 | tee -a $LOG_FILE
              INSTALL_STATUS=${PIPESTATUS[0]}
              
              if [ $INSTALL_STATUS -eq 0 ]; then
                echo "Packages installed successfully"
                MIRROR_WORKED=true
                break 2  # 跳出两层循环
              else
                echo "Package installation failed using $mirror"
              fi
            else
              echo "Feeds update failed using $mirror, retrying..."
            fi
            
            if [ $i -eq 3 ]; then
              echo "Feeds update failed after 3 retries using $mirror"
              echo "Full error log:"
              cat $LOG_FILE
            fi
            sleep 10
          done
        done
        
        # 检查是否有镜像成功工作
        if [ "$MIRROR_WORKED" != "true" ]; then
          echo "All mirrors failed to update feeds!"
          exit 1
        fi
        
        # 验证所有包是否正确安装
        echo "Verifying package installation..."
        PACKAGES=$(./scripts/feeds list | grep -vE '^#|^$' | wc -l)
        echo "Total available packages: $PACKAGES"
        
        if [ $PACKAGES -lt 100 ]; then
          echo "Warning: Only $PACKAGES packages found, possible installation issue!"
          ./scripts/feeds list | grep -vE '^#|^$' | sort
          exit 1
        else
          echo "Package installation verified successfully"
        fi
        
        # 安装自定义feeds包
        echo "Installing custom packages..."
        ./scripts/feeds install -a kenzo small 2>&1 | tee -a $LOG_FILE
        if [ $? -ne 0 ]; then
          echo "Failed to install custom packages!"
          echo "Full error log:"
          cat $LOG_FILE
          exit 1
        fi
        
        # 验证所有包是否正确安装
        echo "Verifying package installation..."
        PACKAGES=$(./scripts/feeds list | grep -vE '^#|^$' | wc -l)
        echo "Total available packages: $PACKAGES"
        
        if [ $PACKAGES -lt 100 ]; then  # 检查是否至少有100个包
          echo "Warning: Only $PACKAGES packages found, possible installation issue!"
          ./scripts/feeds list | grep -vE '^#|^$' | sort
          exit 1
        else
          echo "Package installation verified successfully"
        fi
    - name: Customize feeds (Part 1)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P1_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
        else
          echo "No custom script $DIY_P1_SH found"
        fi

    - name: Load custom configuration
      run: |
        cd $OPENWRT_PATH
        if [ -f "$GITHUB_WORKSPACE/scripts/$CONFIG_FILE" ]; then
          cp $GITHUB_WORKSPACE/scripts/$CONFIG_FILE .config
        else
          echo "No custom config file found, using default"
          make defconfig
        fi

    - name: Customize configuration (Part 2)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P2_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
          $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
        else
          echo "No custom script $DIY_P2_SH found"
        fi

    - name: Download package dependencies
      run: |
        cd $OPENWRT_PATH
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread build"
        make -j$(nproc) V=s || make -j1 V=s  # 并行编译，失败则单线程重试

    - name: Check space usage
      run: |
        df -h
        du -sh $OPENWRT_PATH/bin

    - name: Collect firmware files
      id: collect
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        FIRMWARE_PATH=$(pwd)
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        if [ -n "$(ls $FIRMWARE_PATH/*.bin 2>/dev/null)" ]; then
          echo "FILES_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "FILES_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Upload firmware as artifact
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt-Firmware-${{ github.sha }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 30

    - name: Upload firmware to Release
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_RELEASE == 'true' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.FIRMWARE_PATH }}/*
        tag_name: ${{ github.ref_name }}
        body: |
          OpenWrt firmware for JD BE6500
          Built from commit ${{ github.sha }}
          Date: $(date +%Y-%m-%d)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



