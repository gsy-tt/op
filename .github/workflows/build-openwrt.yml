name: Build OpenWrt for JD BE6500 (IPQ5332)

on:
  workflow_dispatch:  # 手动触发
  release:
    types: published  # 发布Release时触发

env:
  LIENOL_REPO: https://github.com/Lienol/openwrt          # Lienol主仓库
  LIENOL_BRANCH: 23.05                                  # 使用23.05分支
  ARCH: ipq807x                                          # 使用ipq807x目标（兼容IPQ5332）
  SUBARCH: generic                                       # 通用子架构
  CPU_ARCH: aarch64_cortex-a53                           # CPU架构
  FEEDS_CONF: feeds.conf.default                         # Feeds配置文件
  CONFIG_FILE: .config                                   # 编译配置文件
  DIY_P1_SH: diy-part1.sh                                # 自定义脚本1
  DIY_P2_SH: diy-part2.sh                                # 自定义脚本2
  UPLOAD_BIN_DIR: false                                  # 不上传bin目录
  UPLOAD_FIRMWARE: true                                  # 上传固件
  UPLOAD_RELEASE: true                                   # 发布到Release
  TZ: Asia/Shanghai                                      # 时区
  GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}                  # GitHub Token

jobs:
  build:
    runs-on: ubuntu-22.04                                 # 运行环境

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: scripts                                      # 检出路径

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'                             # Python版本

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip python3-distutils file wget upx-ucl
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

    - name: Configure Git Credentials
      run: |
        git config --global credential.helper store
        echo "https://${GITHUB_TOKEN}:@github.com" > ~/.git-credentials
        echo "Git credential helper: $(git config --global --get credential.helper)"
        echo "Stored credentials: $(cat ~/.git-credentials || echo 'No credentials stored')"

    - name: Clone Lienol's OpenWrt repo
      run: |
        rm -rf openwrt
        
        # 检查分支有效性
        echo "Checking branch $LIENOL_BRANCH..."
        if ! git ls-remote --heads $LIENOL_REPO $LIENOL_BRANCH | grep -q $LIENOL_BRANCH; then
          echo "Branch not found. Available branches:"
          git ls-remote --heads $LIENOL_REPO | awk '{print $2}'
          exit 1
        fi
        
        # 三次克隆重试
        for i in {1..3}; do
          echo "Attempt $i/3 to clone repo..."
          git clone --depth=1 $LIENOL_REPO -b $LIENOL_BRANCH openwrt
          if [ $? -eq 0 ]; then
            echo "✅ 仓库克隆成功"
            break
          fi
          echo "❌ 克隆失败，10秒后重试..."
          sleep 10
        done
        
        if [ ! -d "openwrt" ]; then
          echo "💥 三次克隆失败，退出"
          exit 1
        fi
        
        cd openwrt
        echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV

    - name: Prepare IPQ5332 device tree
      run: |
        cd $OPENWRT_PATH
        
        # 创建设备树（IPQ5332在IPQ807x目标下的适配）
        DEVICE_TREE="qcom,ipq5332-jd-be6500.dts"
        DTS_DIR="target/linux/$ARCH/dts"
        mkdir -p "$DTS_DIR"
        
        if [ ! -f "$DTS_DIR/$DEVICE_TREE" ]; then
          echo "生成JD BE6500设备树..."
          > "$DTS_DIR/$DEVICE_TREE"
          
          # 设备树内容（关键修改：兼容ipq807x目标）
          echo "/dts-v1/;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "#include \"qcom,ipq5332.dtsi\"" >> "$DTS_DIR/$DEVICE_TREE"
          echo "#include \"ipq807x.dtsi\"" >> "$DTS_DIR/$DEVICE_TREE"  # 引入ipq807x基础配置
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "/ {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  model = \"JD BE6500\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  compatible = \"qcom,ipq5332\", \"qcom,ipq5000\", \"qcom,ipq807x\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  chosen {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    bootargs = \"earlycon=msm_serial_dm,0x1a10000 console=ttyMSM0,115200n8\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  };" >> "$DTS_DIR/$DEVICE_TREE"
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  memory@80000000 {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    device_type = \"memory\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    reg = <0x80000000 0x40000000>; /* 1GB */" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  };" >> "$DTS_DIR/$DEVICE_TREE"
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  # 网络设备配置（根据BE6500实际硬件调整）" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  ethernet@1a10000 {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    compatible = \"qcom,ipq8074-gmac\", \"qcom,ipq8064-gmac\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    reg = <0x1a10000 0x10000>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    interrupts = <0 42 4>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,phy-handle = <&switch0_phy0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,mdio-bus = <&mdio>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,port-id = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,rxq-pool = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,txq-pool = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    qcom,ptp-clock = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  };" >> "$DTS_DIR/$DEVICE_TREE"
          echo "" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  mdio@1a14000 {" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    compatible = \"qcom,ipq8074-mdio\";" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    reg = <0x1a14000 0x1000>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    #address-cells = <1>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "    #size-cells = <0>;" >> "$DTS_DIR/$DEVICE_TREE"
          echo "  };" >> "$DTS_DIR/$DEVICE_TREE"
          echo "};" >> "$DTS_DIR/$DEVICE_TREE"
          
          echo "设备树内容:"
          cat "$DTS_DIR/$DEVICE_TREE"
        fi
        
        # 生成feeds配置（指向ipq807x源）
        if [ ! -f "feeds.conf.default" ]; then
          echo "生成feeds配置文件..."
          > feeds.conf.default
          
          echo "src-gz openwrt_core https://openwrt.lienz.net/snapshots/targets/ipq807x/generic/packages" >> feeds.conf.default
          echo "src-gz openwrt_base https://openwrt.lienz.net/snapshots/packages/aarch64_cortex-a53/base" >> feeds.conf.default
          echo "src-gz openwrt_luci https://openwrt.lienz.net/snapshots/packages/aarch64_cortex-a53/luci" >> feeds.conf.default
          echo "src-gz openwrt_packages https://openwrt.lienz.net/snapshots/packages/aarch64_cortex-a53/packages" >> feeds.conf.default
          echo "src-git lienol https://github.com/Lienol/openwrt-package" >> feeds.conf.default
          
          echo "feeds配置内容:"
          cat feeds.conf.default
        fi
        
        # 更新Feeds
        echo "开始更新feeds..."
        rm -rf feeds/*
        for i in {1..5}; do
          echo "尝试 $i/5 更新feeds..."
          ./scripts/feeds update -a 2>&1 | tee feeds_update.log
          if [ $? -eq 0 ]; then
            echo "✅ Feeds更新成功，开始安装..."
            ./scripts/feeds install -a 2>&1 | tee feeds_install.log
            if [ $? -eq 0 ]; then
              PACKAGE_COUNT=$(./scripts/feeds list | grep -vE '^#|^$' | wc -l)
              echo "✅ 找到 $PACKAGE_COUNT 个软件包"
              
              # 写入目标配置
              echo "CONFIG_TARGET_ipq807x=y" >> .config
              echo "CONFIG_TARGET_ipq807x_generic=y" >> .config
              echo "CONFIG_TARGET_IPQ807X_DEVICE_generic=y" >> .config  # 通用目标，通过设备树覆盖
              break
            else
              echo "❌ Feeds安装失败"
              cat feeds_install.log
            fi
          else
            echo "❌ Feeds更新失败"
            cat feeds_update.log
          fi
          
          echo "清理并重试..."
          rm -rf feeds/*
          sleep 15
        done
        
        if [ ! -d "feeds" ]; then
          echo "💥 Feeds更新失败，退出"
          cat feeds_update.log
          exit 1
        fi

    - name: Customize feeds (Part 1)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P1_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
          echo "执行自定义脚本 $DIY_P1_SH..."
          $GITHUB_WORKSPACE/scripts/$DIY_P1_SH
        else
          echo "⚠️ 未找到自定义脚本，使用默认配置"
        fi

    - name: Set terminal environment
      run: |
        echo "TERM=dumb" >> $GITHUB_ENV
        echo "无人交互终端环境已设置"

    - name: Fix missing dependencies
      run: |
        cd $OPENWRT_PATH
        # 移除可能冲突的软件包
        sed -i '/CONFIG_PACKAGE_luci-app-samba/d' .config
        sed -i '/CONFIG_PACKAGE_luci-app-mwan3helper/d' .config
        
        # 添加IPQ5332必要驱动
        echo "CONFIG_PACKAGE_kmod-ath11k-ct=y" >> .config       # Wi-Fi 7驱动
        echo "CONFIG_PACKAGE_kmod-qca-ppe=y" >> .config        # PPE加速模块
        echo "CONFIG_PACKAGE_kmod-ledtrig-netdev=y" >> .config # 网络指示灯驱动
        echo "CONFIG_PACKAGE_ath11k-firmware-qca64=y" >> .config # IPQ5332专用固件
        
        # 添加缺失的依赖
        echo "CONFIG_PACKAGE_luci-app-samba4=y" >> .config
        echo "CONFIG_PACKAGE_pdnsd-alt=y" >> .config
        echo "CONFIG_PACKAGE_chinadns-ng=y" >> .config
        echo "CONFIG_PACKAGE_dns2socks=y" >> .config
        echo "CONFIG_PACKAGE_tcping=y" >> .config
        echo "CONFIG_PACKAGE_upx=y" >> .config

    - name: Customize configuration (Part 2)
      run: |
        if [ -f "$GITHUB_WORKSPACE/scripts/$DIY_P2_SH" ]; then
          cd $OPENWRT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
          echo "执行自定义配置脚本 $DIY_P2_SH..."
          $GITHUB_WORKSPACE/scripts/$DIY_P2_SH
        else
          echo "⚠️ 未找到自定义脚本"
        fi

    - name: Download package dependencies
      run: |
        cd $OPENWRT_PATH
        echo "开始下载包依赖..."
        make download -j$(nproc) V=s
        DOWNLOAD_STATUS=$?
        
        # 清理无效下载
        find dl -size -1024c -exec rm -f {} \;
        
        if [ $DOWNLOAD_STATUS -ne 0 ]; then
          echo "⚠️ 下载可能存在错误，继续构建..."
        else
          echo "✅ 依赖下载完成"
        fi

    - name: Build firmware
      run: |
        cd $OPENWRT_PATH
        echo "开始编译固件... (IPQ5332专用)"
        echo "使用 $(nproc) 线程编译..."
        
        # 并行编译，失败则单线程重试
        make -j$(nproc) V=s || make -j1 V=s
        
        if [ $? -ne 0 ]; then
          echo "❌ 编译失败"
          find . -name "*.log" -exec cp {} error_logs/ \;
          tar -czf error_logs.tar.gz error_logs
          exit 1
        else
          echo "✅ 固件编译成功"
        fi

    - name: Check space usage
      run: |
        echo "磁盘空间使用:"
        df -h
        echo "OpenWrt bin目录大小:"
        du -sh $OPENWRT_PATH/bin

    - name: Collect firmware files
      id: collect
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        FIRMWARE_PATH=$(pwd)
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
        if [ -n "$(ls $FIRMWARE_PATH/*.bin 2>/dev/null)" ]; then
          echo "FILES_AVAILABLE=true" >> $GITHUB_ENV
          echo "✅ 找到固件文件:"
          ls -lh $FIRMWARE_PATH/*.bin
        else
          echo "FILES_AVAILABLE=false" >> $GITHUB_ENV
          echo "❌ 未找到固件文件，可用文件:"
          ls -lh $FIRMWARE_PATH/* || true
        fi

    - name: Upload firmware as artifact
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt-Firmware-${{ github.sha }}
        path: ${{ env.FIRMWARE_PATH }}/*
        retention-days: 30
        if-no-files-found: error

    - name: Upload firmware to Release
      if: steps.collect.outputs.status == 'success' && env.FILES_AVAILABLE == 'true' && env.UPLOAD_RELEASE == 'true' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.FIRMWARE_PATH }}/*
        tag_name: ${{ github.ref_name }}
        body: |
          OpenWrt firmware for JD BE6500 (IPQ5332)
          Built from commit ${{ github.sha }}
          Date: $(date +%Y-%m-%d)
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
